<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>AI Career Advisor | Alumnium</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css">
    <!-- Dependencies for the chat script -->
    <script src="https://cdn.jsdelivr.net/npm/marked/marked.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/dompurify@2.3.8/dist/purify.min.js"></script>
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap');
        
        :root {
            --background: #f8f9fa; --foreground: #111827; --card: #ffffff; --primary: #111827;
            --primary-foreground: #ffffff; --secondary: #f3f4f6; --muted-foreground: #6b7280;
            --border: #e5e7eb; --radius: 1rem; --font-sans: 'Inter', -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif;
            --shadow-lg: 0 10px 15px -3px rgb(0 0 0 / 0.07), 0 4px 6px -4px rgb(0 0 0 / 0.07);
            --glow-color: rgba(139, 92, 246, 0.2);
        }
        html.dark {
            --background: #0d1117; --foreground: #e6edf3; --card: #161b22; --primary: #e6edf3;
            --primary-foreground: #0d1117; --secondary: #21262d; --muted-foreground: #8b949e;
            --border: #30363d; --glow-color: rgba(139, 92, 246, 0.3);
        }

        body {
            font-family: var(--font-sans);
            background-color: var(--background);
            color: var(--foreground);
            display: flex;
            align-items: center;
            justify-content: center;
            min-height: 100vh;
            padding: 1.5rem;
        }

        .main-container {
            width: 100%;
            max-width: 800px;
        }
        
        .content-card {
            background-color: var(--card);
            border: 1px solid var(--border);
            border-radius: var(--radius);
            box-shadow: var(--shadow-lg);
            padding: 2.5rem;
            position: relative;
            overflow: hidden;
        }

        .aurora-glow {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            width: 600px;
            height: 600px;
            background: radial-gradient(ellipse at center, var(--glow-color) 0%, rgba(0, 0, 0, 0) 70%);
            filter: blur(80px);
            z-index: 0;
            pointer-events: none;
        }

        .chatbot-container {
            height: 60vh;
            min-height: 450px;
            border-radius: var(--radius);
            border: 1px solid var(--border);
            margin-top: 1.5rem;
            display: flex;
            flex-direction: column;
        }

        .chat-window {
            flex-grow: 1;
            padding: 1rem;
            overflow-y: auto;
            display: flex;
            flex-direction: column;
            gap: 0.75rem;
        }

        .chat-message {
            padding: 0.75rem 1.25rem;
            border-radius: 1.25rem;
            max-width: 80%;
            word-wrap: break-word;
            line-height: 1.5;
        }

        .chat-message p:last-child { margin-bottom: 0; }
        .chat-message ul, .chat-message ol { padding-left: 1.25rem; }

        .user-message {
            background-color: var(--primary);
            color: var(--primary-foreground);
            align-self: flex-end;
            border-bottom-right-radius: 0.25rem;
        }

        .bot-message {
            background-color: var(--secondary);
            color: var(--foreground);
            align-self: flex-start;
            border-bottom-left-radius: 0.25rem;
        }
        .bot-message.typing em {
             color: var(--muted-foreground);
        }

        .chat-input-form {
            display: flex;
            padding: 1rem;
            border-top: 1px solid var(--border);
        }
        
        .chat-input {
            flex-grow: 1;
            border: none;
            background-color: transparent;
            color: var(--foreground);
            font-size: 1rem;
        }
        .chat-input:focus {
            outline: none;
            box-shadow: none;
        }

        .btn-theme-toggle {
            position: absolute;
            top: 1.5rem;
            right: 1.5rem;
            background-color: var(--secondary);
            color: var(--muted-foreground);
            border: 1px solid var(--border);
        }
        .btn-theme-toggle:hover {
            color: var(--foreground);
        }
    </style>
</head>
<body>
    <script>
        (function() {
            const savedTheme = localStorage.getItem('theme') || (window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light');
            if (savedTheme === 'dark') {
                document.documentElement.classList.add('dark');
            }
        })();
    </script>

    <div class="main-container">
        <div class="content-card">
            <div class="aurora-glow"></div>
            
            <button class="btn btn-sm btn-theme-toggle" id="theme-toggle">
                <i class="bi bi-moon-stars-fill"></i>
            </button>

            <div class="text-center">
                <h1 class="h2 fw-bold">AI Career Advisor</h1>
                <p class="text-muted-foreground">Your personal guide to career planning. Current endpoint: <code id="chat-url" class="small"></code></p>
            </div>
            
            <div class="chatbot-container">
                <div class="chat-window" id="messages">
                    <!-- Chat messages will be appended here -->
                </div>
                <form class="chat-input-form" id="chat-form">
                    <input type="text" id="chat-input" class="form-control chat-input" placeholder="Type your message..." autocomplete="off">
                    <button type="submit" class="btn btn-primary" id="send-btn"><i class="bi bi-send-fill"></i></button>
                </form>
            </div>
        </div>
    </div>

    <script>
        // ====== CONFIG ======
        const CHAT_URL = 'https://naughty7364.app.n8n.cloud/webhook/73c36cd0-2312-43f2-85ef-981755860eae/chat';
        // ======================

        const form = document.getElementById('chat-form');
        const input = document.getElementById('chat-input');
        const messages = document.getElementById('messages');
        const sendBtn = document.getElementById('send-btn');

        // create message bubble
        function pushMessage(html, who = 'bot') {
            const el = document.createElement('div');
            el.className = 'chat-message ' + (who === 'user' ? 'user-message' : 'bot-message');
            el.innerHTML = html;
            messages.appendChild(el);
            messages.scrollTop = messages.scrollHeight;
        }

        function pushTyping() {
            const t = document.createElement('div');
            t.className = 'chat-message bot-message typing';
            t.id = '__typing';
            t.innerHTML = '<em>Generating roadmap...</em>';
            messages.appendChild(t);
            messages.scrollTop = messages.scrollHeight;
        }
        function removeTyping() {
            const t = document.getElementById('__typing');
            if (t) t.remove();
        }

        // Robust extractor: find first meaningful string inside nested JSON
        function extractTextFromObject(obj) {
            if (obj == null) return null;
            if (typeof obj === 'string') return obj;
            if (typeof obj === 'number' || typeof obj === 'boolean') return String(obj);

            if (Array.isArray(obj)) {
                for (const item of obj) {
                    const found = extractTextFromObject(item);
                    if (found) return found;
                }
            } else if (typeof obj === 'object') {
                // Common keys
                const keysPriority = ['output', 'reply', 'text', 'message', 'content', 'response', 'result', 'data'];
                for (const k of keysPriority) {
                    if (k in obj) {
                        const found = extractTextFromObject(obj[k]);
                        if (found) return found;
                    }
                }
                // fallback: iterate all keys
                for (const k of Object.keys(obj)) {
                    const found = extractTextFromObject(obj[k]);
                    if (found) return found;
                }
            }
            return null;
        }

        async function sendMessage(userMessage) {
            pushMessage(escapeHtml(userMessage), 'user');
            input.value = '';
            sendBtn.disabled = true;
            pushTyping();

            try {
                const res = await fetch(CHAT_URL, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        message: userMessage
                    })
                });

                if (!res.ok) {
                    const text = await res.text();
                    console.error('Non-OK response:', res.status, text);
                    removeTyping();
                    pushMessage('<strong>Error:</strong> ' + escapeHtml(res.status + ' ' + text));
                    return;
                }

                // Try parse JSON
                let data;
                try {
                    data = await res.json();
                } catch (e) {
                    const raw = await res.text();
                    console.error('Failed JSON parse, raw:', raw);
                    removeTyping();
                    pushMessage('<strong>Error parsing response</strong><br><pre>' + escapeHtml(raw) + '</pre>');
                    return;
                }

                console.log('Raw response JSON:', data);

                const extracted = extractTextFromObject(data) || 'Sorry, no textual response found.';
                // Convert Markdown -> HTML
                const html = marked.parse(extracted);
                // Sanitize HTML to avoid XSS (DOMPurify)
                const clean = DOMPurify.sanitize(html);
                removeTyping();
                pushMessage(clean, 'bot');

            } catch (err) {
                console.error('Fetch error:', err);
                removeTyping();
                pushMessage('<strong>Network error</strong>. See console for details.');
            } finally {
                sendBtn.disabled = false;
                input.focus();
            }
        }

        // Simple html escape for user messages
        function escapeHtml(str) {
            return String(str)
                .replace(/&/g, '&amp;')
                .replace(/</g, '&lt;')
                .replace(/>/g, '&gt;')
                .replace(/"/g, '&quot;')
                .replace(/'/g, '&#039;');
        }

        form.addEventListener('submit', (e) => {
            e.preventDefault();
            const message = input.value.trim();
            if (!message) return;
            sendMessage(message);
        });

        // Optional: quick demo starter
        window.addEventListener('load', () => {
            // show initial hint bubble
            pushMessage('<em>Hi — ask me for a career roadmap. Example: "I want a 6-month fullstack roadmap, I am a beginner."</em>', 'bot');
            // set displayed URL
            document.getElementById('chat-url').textContent = CHAT_URL;
        });
        
        // --- Theme Toggle Logic ---
        const themeToggle = document.getElementById('theme-toggle');
        themeToggle.addEventListener('click', () => {
            const htmlElement = document.documentElement;
            const newTheme = htmlElement.classList.contains('dark') ? 'light' : 'dark';
            htmlElement.classList.toggle('dark', newTheme === 'dark');
            localStorage.setItem('theme', newTheme);
        });
    </script>
</body>
</html>

