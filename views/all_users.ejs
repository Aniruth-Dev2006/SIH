<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>All Users | Alumnium</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css">
    <link rel="stylesheet" href="all_users.css">
</head>
<body>

    <div class="sidebar-backdrop" id="sidebarBackdrop"></div>
    <div class="dashboard-layout">
        <aside class="sidebar" id="sidebar">
            <a href="/admin" class="sidebar-header"><i class="bi bi-link-45deg"></i> Alumnium</a>
            <nav class="sidebar-nav">
                <ul class="nav flex-column">
                    <li class="nav-item"><a class="nav-link" href="/admin"><i class="bi bi-grid-1x2-fill"></i> Dashboard</a></li>
                    <li class="nav-item"><a class="nav-link active" href="/user_management"><i class="bi bi-people-fill"></i> User Management</a></li>
                    <li class="nav-item"><a class="nav-link" href="#"><i class="bi bi-megaphone-fill"></i> Announcements</a></li>
                    <li class="nav-item"><a class="nav-link" href="#"><i class="bi bi-calendar-event-fill"></i> Events</a></li>
                    <li class="nav-item"><a class="nav-link" href="#"><i class="bi bi-cash-coin"></i> Donations</a></li>
                    <li class="nav-item"><a class="nav-link" href="#"><i class="bi bi-chat-quote-fill"></i> Feedback</a></li>
                </ul>
            </nav>
            <div class="sidebar-footer">
                <div class="dropdown dropend w-100">
                    <div class="d-flex align-items-center">
                        <a href="#" class="user-profile">
                            <img src="https://placehold.co/40x40/EBEBEB/000000?text=A" alt="Admin">
                            <div><div class="fw-bold">Admin User</div><small class="text-muted-foreground">admin@alumnium.in</small></div>
                        </a>
                        <a href="#" class="profile-menu-trigger" data-bs-toggle="dropdown" aria-expanded="false"><i class="bi bi-three-dots-vertical"></i></a>
                        <ul class="dropdown-menu">
                            <li><a class="dropdown-item" href="#" id="theme-menu-toggle"><i class="bi bi-moon-stars-fill me-2"></i> Theme</a></li>
                            <li><hr class="dropdown-divider"></li>
                            <li><a class="dropdown-item text-danger" href="/"><i class="bi bi-box-arrow-right me-2"></i> Logout</a></li>
                        </ul>
                    </div>
                </div>
            </div>
        </aside>

        <main class="main-content">
            <div class="mobile-header d-lg-none mb-4">
                <h1 class="h2">All Users</h1>
                <button class="btn btn-light" type="button" id="sidebarToggle"><i class="bi bi-list"></i></button>
            </div>
            
            <div class="d-flex justify-content-between align-items-center mb-4 d-none d-lg-flex">
                <h1 class="h2">All Users</h1>
                <a href="/user_management" class="btn btn-light d-none d-lg-flex align-items-center"><i class="bi bi-arrow-left me-2"></i> Back to Hub</a>
            </div>

            <div class="row g-4">
                <!-- Filters & Search Card -->
                <div class="col-12 animate-on-scroll" style="--animation-order: 1;">
                    <div class="content-card">
                        <div class="aurora-glow"></div>
                        <div class="row g-3 align-items-end">
                            <div class="col-lg-7">
                                <label for="search-input" class="form-label fw-medium">Search</label>
                                <div class="search-wrapper">
                                    <i class="bi bi-search search-icon"></i>
                                    <input type="text" id="search-input" class="form-control" placeholder="Search by name...">
                                </div>
                            </div>
                            <div class="col-lg-3 col-sm-6">
                                <label for="role-filter" class="form-label fw-medium">Role</label>
                                <select id="role-filter" class="form-select">
                                    <option value="">All Roles</option>
                                    <option value="Student">Student</option>
                                    <option value="Alumni">Alumni</option>
                                </select>
                            </div>
                            <div class="col-lg-2 col-sm-6">
                                <label for="batch-filter" class="form-label fw-medium">Batch</label>
                                <input id="batch-filter" type="text" class="form-control" placeholder="Any year...">
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Users Table Card -->
                <div class="col-12 animate-on-scroll" style="--animation-order: 2;">
                    <div class="content-card">
                        <div class="aurora-glow"></div>
                        <div id="table-container" class="table-responsive">
                            <table class="table table-hover mb-0">
                                <thead>
                                    <tr>
                                        <th>Name</th>
                                        <th>Roll Number</th>
                                        <th>Email</th>
                                        <th>Role</th>
                                        <th>Batch / Year</th>
                                        <th class="text-end">Actions</th>
                                    </tr>
                                </thead>
                                <tbody id="users-table-body">
                                    <!-- Table body will be populated by JavaScript -->
                                </tbody>
                            </table>
                        </div>
                        <div id="no-results-message" class="text-center text-muted-foreground py-5" style="display: none;">
                            <h5 class="fw-bold">No Users Found</h5>
                            <p>Your search or filter criteria did not match any users.</p>
                        </div>
                    </div>
                </div>
            </div>
        </main>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', () => {
            // --- 1. INITIAL DATA ---
            // FIX: Replaced EJS tag with static mock data to resolve SyntaxError.
            const initialUsers = [
                { name: "Priya Sharma", rno: "23AL001", email: "priya.sharma@example.com", role: "Alumni", batch: 2023 },
                { name: "Rohan Verma", rno: "25CS012", email: "rohan.verma@example.com", role: "Student", batch: 2025 },
                { name: "Anjali Gupta", rno: "22ME034", email: "anjali.gupta@example.com", role: "Alumni", batch: 2022 },
                { name: "Vikram Singh", rno: "24EE007", email: "vikram.singh@example.com", role: "Student", batch: 2024 },
                { name: "Sameer Khan", rno: "21CE056", email: "sameer.khan@example.com", role: "Alumni", batch: 2021 },
                { name: "Neha Reddy", rno: "26IT023", email: "neha.reddy@example.com", role: "Student", batch: 2026 },
                { name: "Arjun Desai", rno: "20CS101", email: "arjun.desai@example.com", role: "Alumni", batch: 2020 }
            ];

            // --- 2. ELEMENT SELECTORS ---
            const tableBody = document.getElementById('users-table-body');
            const searchInput = document.getElementById('search-input');
            const roleFilter = document.getElementById('role-filter');
            const batchFilter = document.getElementById('batch-filter');
            const noResultsMessage = document.getElementById('no-results-message');
            const animatedElements = document.querySelectorAll('.animate-on-scroll');

            // --- 3. FUNCTIONS ---

            // Renders the table with a given list of users
            const renderTable = (userList) => {
                tableBody.innerHTML = '';
                noResultsMessage.style.display = userList.length === 0 ? 'block' : 'none';

                userList.forEach(user => {
                    const row = document.createElement('tr');
                    row.innerHTML = `
                        <td><div class="fw-bold">${user.name}</div></td>
                        <td class="text-muted-foreground">${user.rno}</td>
                        <td class="text-muted-foreground">${user.email}</td>
                        <td>${user.role}</td>
                        <td class="text-muted-foreground">${user.batch}</td>
                        <td class="text-end">
                            <div class="dropdown">
                                <button class="btn btn-sm btn-light" type="button" data-bs-toggle="dropdown" aria-expanded="false"><i class="bi bi-three-dots-vertical"></i></button>
                                <ul class="dropdown-menu dropdown-menu-end">
                                    <li><a class="dropdown-item" href="#"><i class="bi bi-pencil-square me-2"></i> Edit</a></li>
                                    <li><a class="dropdown-item text-danger" href="#"><i class="bi bi-trash-fill me-2"></i> Delete</a></li>
                                </ul>
                            </div>
                        </td>
                    `;
                    tableBody.appendChild(row);
                });
            };
            
            // Debounce function to prevent API calls on every keystroke
            const debounce = (func, delay) => {
                let timeout;
                return (...args) => {
                    clearTimeout(timeout);
                    timeout = setTimeout(() => {
                        func.apply(this, args);
                    }, delay);
                };
            };

            // Main function to fetch and render filtered users
            const performSearch = async () => {
                const name = searchInput.value;
                const role = roleFilter.value;
                const batch = batchFilter.value;

                // Construct the query string, only including non-empty parameters
                const params = new URLSearchParams();
                if (name) params.append('name', name);
                if (role) params.append('role', role);
                if (batch) params.append('batch', batch);

                try {
                    // NOTE: This fetch call will not work without a running server.
                    // This is placeholder logic for when you connect the backend.
                    const response = await fetch(`/api/search-users?${params.toString()}`);
                    if (!response.ok) {
                        throw new Error(`HTTP error! status: ${response.status}`);
                    }
                    const filteredUsers = await response.json();
                    renderTable(filteredUsers);
                } catch (error) {
                    console.error("Failed to fetch search results:", error);
                    // Fallback to client-side filtering with mock data if fetch fails
                    const filtered = initialUsers.filter(user => {
                        const nameMatch = name ? user.name.toLowerCase().includes(name.toLowerCase()) : true;
                        const roleMatch = role ? user.role === role : true;
                        const batchMatch = batch ? user.batch.toString().includes(batch) : true;
                        return nameMatch && roleMatch && batchMatch;
                    });
                    renderTable(filtered);
                }
            };
            
            // --- 4. EVENT LISTENERS & INITIALIZERS ---

            // Use the debounced function for the inputs
            const debouncedSearch = debounce(performSearch, 300);
            searchInput.addEventListener('input', debouncedSearch);
            batchFilter.addEventListener('input', debouncedSearch);
            roleFilter.addEventListener('change', performSearch); // No debounce needed for dropdown

            // Initial render
            renderTable(initialUsers);

            // Animate on scroll
            const observer = new IntersectionObserver((entries) => {
                entries.forEach(entry => { if (entry.isIntersecting) { entry.target.classList.add('is-visible'); } });
            }, { threshold: 0.1 });
            animatedElements.forEach(el => observer.observe(el));

            // --- 5. SHARED DASHBOARD LOGIC (THEME & SIDEBAR) ---
            const themeMenuToggle = document.getElementById('theme-menu-toggle');
            const htmlElement = document.documentElement;
            const applyTheme = (theme) => {
                htmlElement.classList.remove('light', 'dark');
                htmlElement.classList.add(theme);
            };
            const savedTheme = localStorage.getItem('theme') || (window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light');
            applyTheme(savedTheme);

            themeMenuToggle.addEventListener('click', (e) => {
                e.preventDefault();
                const newTheme = htmlElement.classList.contains('dark') ? 'light' : 'dark';
                localStorage.setItem('theme', newTheme);
                applyTheme(newTheme);
            });

            const sidebarToggle = document.getElementById('sidebarToggle');
            const sidebar = document.getElementById('sidebar');
            const backdrop = document.getElementById('sidebarBackdrop');
            if (sidebarToggle) {
                sidebarToggle.addEventListener('click', () => { 
                    sidebar.classList.add('show'); 
                    document.body.classList.add('sidebar-open'); 
                });
            }
            if (backdrop) {
                backdrop.addEventListener('click', () => { 
                    sidebar.classList.remove('show'); 
                    document.body.classList.remove('sidebar-open'); 
                });
            }
        });
    </script>
</body>
</html>

