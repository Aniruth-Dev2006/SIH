<!-- Alumni Sidebar - Reusable Component -->
<aside class="sidebar" id="sidebar" role="navigation" aria-label="Main navigation">
    <div class="d-flex align-items-center justify-content-between mb-3">
        <a href="/alumni-dashboard" class="sidebar-header mb-0">
            <i class="bi bi-link-45deg"></i> 
            <span>Alumnium</span>
        </a>
        <!-- Notification Bell -->
        <div class="dropdown">
            <button class="btn btn-link text-decoration-none p-2 notification-bell" 
                    id="notificationDropdown" 
                    data-bs-toggle="dropdown" 
                    aria-expanded="false"
                    aria-label="Notifications">
                <i class="bi bi-bell-fill"></i>
                <span class="notification-count" id="notificationCount" style="display: none;">0</span>
            </button>
            <ul class="dropdown-menu dropdown-menu-end notification-dropdown" aria-labelledby="notificationDropdown">
                <li class="dropdown-header d-flex justify-content-between align-items-center">
                    <span>Notifications</span>
                    <button class="btn btn-link btn-sm text-decoration-none p-0" id="markAllRead">Mark all read</button>
                </li>
                <li><hr class="dropdown-divider"></li>
                <li id="notificationList" class="notification-list">
                    <div class="text-center py-3 text-muted-foreground">
                        <i class="bi bi-bell-slash"></i>
                        <p class="mb-0 mt-2">No notifications</p>
                    </div>
                </li>
                <li><hr class="dropdown-divider"></li>
                <li><a class="dropdown-item text-center small" href="/alumni-announcements">View all announcements</a></li>
            </ul>
        </div>
    </div>
    
    <nav class="sidebar-nav">
        <ul class="nav flex-column" role="menu">
            <li class="nav-item" role="none">
                <a class="nav-link <%= currentPage === 'dashboard' ? 'active' : '' %>" href="/alumni-dashboard" role="menuitem">
                    <i class="bi bi-grid-1x2-fill"></i> Dashboard
                </a>
            </li>
            <li class="nav-item" role="none">
                <a class="nav-link <%= currentPage === 'announcements' ? 'active' : '' %>" href="/alumni-announcements" role="menuitem">
                    <i class="bi bi-megaphone-fill"></i> Announcements
                </a>
            </li>
            <li class="nav-item" role="none">
                <a class="nav-link <%= currentPage === 'leaderboard' ? 'active' : '' %>" href="/alumni-leaderboard" role="menuitem">
                    <i class="bi bi-trophy-fill"></i> Leaderboard
                </a>
            </li>
            <li class="nav-item" role="none">
                <a class="nav-link <%= currentPage === 'mentorship' ? 'active' : '' %>" href="/alumni-mentorship" role="menuitem">
                    <i class="bi bi-people-fill"></i> Mentorship
                </a>
            </li>
            <li class="nav-item" role="none">
                <a class="nav-link <%= currentPage === 'network' ? 'active' : '' %>" href="/alumni-network" role="menuitem">
                    <i class="bi bi-person-lines-fill"></i> My Network
                </a>
            </li>
            <li class="nav-item" role="none">
                <a class="nav-link <%= currentPage === 'jobs' ? 'active' : '' %>" href="/alumni-jobs" role="menuitem">
                    <i class="bi bi-briefcase-fill"></i> Jobs
                </a>
            </li>
            <li class="nav-item" role="none">
                <a class="nav-link <%= currentPage === 'connect' ? 'active' : '' %>" href="/alumni-connect" role="menuitem">
                    <i class="bi bi-chat-dots-fill"></i> Connect
                </a>
            </li>
            <li class="nav-item" role="none">
                <a class="nav-link <%= currentPage === 'events' ? 'active' : '' %>" href="/alumni-events" role="menuitem">
                    <i class="bi bi-calendar-event-fill"></i> Events
                </a>
            </li>
            <li class="nav-item" role="none">
                <a class="nav-link <%= currentPage === 'marketplace' ? 'active' : '' %>" href="/alumni-marketplace" role="menuitem">
                    <i class="bi bi-shop"></i> Marketplace
                </a>
            </li>
            <li class="nav-item" role="none">
                <a class="nav-link <%= currentPage === 'donations' ? 'active' : '' %>" href="/alumni-donations" role="menuitem">
                    <i class="bi bi-cash-coin"></i> Donations
                </a>
            </li>
            <li class="nav-item" role="none">
                <a class="nav-link <%= currentPage === 'feedback' ? 'active' : '' %>" href="/alumni-feedback" role="menuitem">
                    <i class="bi bi-chat-quote-fill"></i> Feedback
                </a>
            </li>
        </ul>
    </nav>
    
    <div class="sidebar-footer">
        <div class="dropdown dropend w-100">
            <div class="d-flex align-items-center">
                <a href="/alumni-profile" class="user-profile">
                    <img src="<%= alumni.profilePicture || 'https://ui-avatars.com/api/?name=' + encodeURIComponent(alumni.name) + '&background=6366f1&color=fff' %>" alt="<%= alumni.name %>">
                    <div>
                        <div class="fw-bold"><%= alumni.name %></div>
                        <small class="text-muted-foreground"><%= alumni.batch %></small>
                    </div>
                </a>
                <a href="#" class="profile-menu-trigger" data-bs-toggle="dropdown" aria-expanded="false">
                    <i class="bi bi-three-dots-vertical"></i>
                </a>
                <ul class="dropdown-menu dropdown-menu-end">
                    <li>
                        <a class="dropdown-item" href="/alumni-profile">
                            <i class="bi bi-person-circle me-2"></i> My Profile
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item" href="/alumni-edit-profile">
                            <i class="bi bi-pencil-square me-2"></i> Edit Profile
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item" href="#" id="theme-menu-toggle">
                            <i class="bi bi-moon-stars-fill me-2"></i> 
                            <span id="theme-text">Toggle Theme</span>
                        </a>
                    </li>
                    <li><hr class="dropdown-divider"></li>
                    <li>
                        <a class="dropdown-item text-danger" href="/logout">
                            <i class="bi bi-box-arrow-right me-2"></i> Logout
                        </a>
                    </li>
                </ul>
            </div>
        </div>
    </div>
</aside>

<script>
// Anti-Flicker Script - Runs immediately before page renders
(function() {
    const savedTheme = localStorage.getItem('theme') || (window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light');
    if (savedTheme === 'dark') {
        document.documentElement.classList.add('dark');
    }
})();

// Theme toggle functionality
document.addEventListener('DOMContentLoaded', function() {
    const themeToggle = document.getElementById('theme-menu-toggle');
    const themeText = document.getElementById('theme-text');
    const themeIcon = themeToggle ? themeToggle.querySelector('i') : null;
    
    // Update theme icon and text based on current theme
    function updateThemeUI() {
        const isDark = document.documentElement.classList.contains('dark');
        if (themeIcon && themeText) {
            if (isDark) {
                themeIcon.className = 'bi bi-sun-fill me-2';
                themeText.textContent = 'Light Mode';
            } else {
                themeIcon.className = 'bi bi-moon-stars-fill me-2';
                themeText.textContent = 'Dark Mode';
            }
        }
    }
    
    // Initialize theme UI
    updateThemeUI();
    
    if (themeToggle) {
        themeToggle.addEventListener('click', function(e) {
            e.preventDefault();
            const isDark = document.documentElement.classList.contains('dark');
            
            if (isDark) {
                document.documentElement.classList.remove('dark');
                localStorage.setItem('theme', 'light');
            } else {
                document.documentElement.classList.add('dark');
                localStorage.setItem('theme', 'dark');
            }
            
            updateThemeUI();
        });
    }
    
    // Notification System
    const notificationBell = document.getElementById('notificationDropdown');
    const notificationCount = document.getElementById('notificationCount');
    const notificationList = document.getElementById('notificationList');
    const markAllReadBtn = document.getElementById('markAllRead');
    
    let notifications = [];
    
    // Fetch notifications from server
    async function fetchNotifications() {
        try {
            const response = await fetch('/api/notifications');
            if (response.ok) {
                notifications = await response.json();
                updateNotificationUI();
            }
        } catch (error) {
            console.error('Failed to fetch notifications:', error);
        }
    }
    
    // Update notification UI
    function updateNotificationUI() {
        const unreadCount = notifications.filter(n => !n.read).length;
        
        // Update count badge
        if (unreadCount > 0) {
            notificationCount.textContent = unreadCount > 99 ? '99+' : unreadCount;
            notificationCount.style.display = 'flex';
        } else {
            notificationCount.style.display = 'none';
        }
        
        // Update notification list
        if (notifications.length === 0) {
            notificationList.innerHTML = `
                <div class="text-center py-3 text-muted-foreground">
                    <i class="bi bi-bell-slash"></i>
                    <p class="mb-0 mt-2">No notifications</p>
                </div>
            `;
        } else {
            notificationList.innerHTML = notifications.slice(0, 5).map(n => `
                <li>
                    <a class="dropdown-item notification-item ${n.read ? '' : 'unread'}" 
                       href="#" 
                       data-id="${n._id}"
                       onclick="markAsRead(event, '${n._id}')">
                        <div class="d-flex">
                            <i class="bi bi-${n.icon || 'info-circle'} me-2"></i>
                            <div class="flex-grow-1">
                                <div class="notification-title">${n.title}</div>
                                <div class="notification-text">${n.message}</div>
                                <small class="text-muted-foreground">${formatTime(n.createdAt)}</small>
                            </div>
                            ${!n.read ? '<span class="unread-dot"></span>' : ''}
                        </div>
                    </a>
                </li>
            `).join('');
        }
    }
    
    // Mark notification as read
    window.markAsRead = async function(event, notificationId) {
        event.preventDefault();
        try {
            const response = await fetch(`/api/notifications/${notificationId}/read`, {
                method: 'PATCH'
            });
            if (response.ok) {
                const notification = notifications.find(n => n._id === notificationId);
                if (notification) notification.read = true;
                updateNotificationUI();
            }
        } catch (error) {
            console.error('Failed to mark as read:', error);
        }
    };
    
    // Mark all as read
    if (markAllReadBtn) {
        markAllReadBtn.addEventListener('click', async function(e) {
            e.preventDefault();
            try {
                const response = await fetch('/api/notifications/mark-all-read', {
                    method: 'PATCH'
                });
                if (response.ok) {
                    notifications.forEach(n => n.read = true);
                    updateNotificationUI();
                }
            } catch (error) {
                console.error('Failed to mark all as read:', error);
            }
        });
    }
    
    // Format time helper
    function formatTime(dateString) {
        const date = new Date(dateString);
        const now = new Date();
        const diffMs = now - date;
        const diffMins = Math.floor(diffMs / 60000);
        
        if (diffMins < 1) return 'Just now';
        if (diffMins < 60) return `${diffMins}m ago`;
        if (diffMins < 1440) return `${Math.floor(diffMins / 60)}h ago`;
        if (diffMins < 10080) return `${Math.floor(diffMins / 1440)}d ago`;
        return date.toLocaleDateString();
    }
    
    // Initial fetch and periodic updates
    fetchNotifications();
    setInterval(fetchNotifications, 60000); // Update every minute
});
</script>
